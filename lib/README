The pwtools package.

Copyright (c) 2008-2010, Steve Schmerler <mefx@gmx.net>.

Installation
============

Python versions
---------------

Developed mostly with Python 2.5. Should work with all versions from 2.4 on,
bot not yet 3.x.

Add-on packages
---------------

Must have:
    - numpy 
    - scipy

optional: 
    parse.py:
        - PyCifRW (http://pycifrw.berlios.de)
        - BeautifulSoup (http://www.crummy.com/software/BeautifulSoup/)
        
        Without these, you will get warnings and some parsing classes will not
        work (Cif and CML parsing currently). If you wish, uncomment the warnings
        at the top of lib/parse.py .
    test/*
        - matplotlib

path issues (.bashrc/.profile)
------------------------------

Suppose all pwtools files are in /home/foo/pwtools/.
    
    # makes "import pwtools" possible
    export PYTHONPATH=$PYTHONPATH:/home/foo


Fortran extensions
------------------

See Makefile.

Usage
=====

See test/test_*.py for examples.

Methology
---------

There are two ways of computing the PDOS (V is is array of atomic velocities,
see pydos.velocity(). 
    (1) vacf way: FFT of the velocity autocorrelation function (vacf):
        V -> VACF -> FFT(VACF) = PDOS, see pydos.vacf_pdos()
    (2) direct way: |FFT(V)**2| = PDOS, see pydos.direct_pdos()
- If you mirror the VACF before the FFT, then you get double
  frequency resolution. 
- By default, direct_pdos() uses zero padding to get the same frequency
  resolution as you would get with mirroring the signal in vacf_pdos().
- Both methods use Welch windowing by default to reduce "leakage" from
  neighboring peaks. See also test/test_pdos_methods.py 
- Both methods must produce exactly the same results (up to numerical noise).


Format-specific notes
=====================

Pwscf
-----

Notes about when you need to transform the atomic coordinates *before* using
them to calculate the PDOS. See 
    test/test_pdos.py 
    test/test_pdos_coord_trans.py

If needed, that is the input file (pw.in) has:
    ATOMIC_POSITIONS crystal
    ibrav=0 
    CELL_PARAMETERS is present

transform to cartesian coords. The scale (or unit: Bohr, Angstrom, ..) does
not matter, b/c currently the integral area under the PDUS curve is normalized
in pydos.*_pdos(). But coords MUST be cartesian!


allowed ATOMIC_POSITIONS units (from the Pwscf help):
   alat    : atomic positions are in cartesian coordinates,
             in units of the lattice parameter "a" (default)

   bohr    : atomic positions are in cartesian coordinate,
             in atomic units (i.e. Bohr)

   angstrom: atomic positions are in cartesian coordinates,
             in Angstrom

   crystal : atomic positions are in crystal coordinates, i.e.
             in relative coordinates of the primitive lattice vectors
             (see below)

Note: crystal cords are also called fractional coordinates (e.g. in Cif files).

short:

    ATOMIC_POSITIONS angstrom  -> cartesian angstrom
    ATOMIC_POSITIONS bohr      -> cartesian bohr  [== a.u.] 
    ATOMIC_POSITIONS           -> cartesian alat
    ATOMIC_POSITIONS alat      -> cartesian alat
    ATOMIC_POSITIONS crystal   -> crystal alat | a.u. 

The unit of CELL_PARAMETERS is only important for ATOMIC_POSITIONS crystal,
i.e. if one wants to calculate cartesian coords.
    if celldm(1) present  -> CELL_PARAMETERS in alat -> crystal alat
    if not                -> CELL_PARAMETERS in a.u. -> crystal a.u.


