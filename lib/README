The pwtools package.

Copyright (c) 2008-2010, Steve Schmerler <mefx@gmx.net>.

Installation
============

Python versions
---------------

The package is written in Python 2.5.2. Most likely it also works with
Python 2.3 < 3.0, i.e. in fact the whole 2.x series. If in doubt, use at
least 2.4. For the new Python 3.0, there are a few changes needed. See
www.python.org. Have a nice day.

Add-on packages
---------------

We use numpy and scipy. Tested was numpy 1.1.0, 1.2.1 and scipy 0.6.0, 0.7.0
(on openSUSE 10.3 and Debian lenny, but the Linux distro shouldn't matter).

Debian:
    # apt-get install python-numpy python-scipy

openSuSE 10.3
    - In Yast -> Software Repositories, add
      http://download.opensuse.org/repositories/science/openSUSE_10.3
    - install python-numpy, python-scipy

Optional functionallity in pwtools.lib.parse:
    PyCifRW (http://pycifrw.berlios.de)
    BeautifulSoup (http://www.crummy.com/software/BeautifulSoup/)
    
    Without these, you will get warnings and some parsing classes will not
    work (Cif and CML parsing currently). If you wish, uncomment the warnings
    at the top of lib/parse.py .

path issues (.bashrc/.profile)
------------------------------

Suppose all pwtools files are in
/home/foo/pwtools/ and the exe pydos.py in /home/foo/pwtools/lib/
    
    # makes "import pwtools" possible
    export PYTHONPATH=$PYTHONPATH:/home/foo


Fortran extensions
------------------

See Makefile.

Usage
-----

See test/test_*.py for examples.

Methology
---------

There are two ways of computing the PDOS (V is is array of atomic velocities,
see pydos.py for details). 
    (1) vacf way: FFT of the velocity autocorrelation function (vacf):
        V -> VACF -> FFT(VACF) = PDOS, see pydos.vacf_pdos()
    (2) direct way: |FFT(V)**2| = PDOS, see pydos.direct_pdos()
- If you mirror the VACF before the FFT (-m option), then you get double
  frequency resolution. 
- By default, direct_pdos() uses zero padding to get the same frequency
  resolution as you would get with mirroring the signal in vacf_pdos().
- Both methods use Welch windowing by default to reduce "leakage" from
  neighboring peaks. See also test/test_pdos_methods.py 
- Both methods must produce exactly the same results (up to numerical noise).

