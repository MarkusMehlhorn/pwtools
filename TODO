base.py
-------
* Re-think the whole implementation of FlexibleGetters. I think all of this can
  be done using lazy evaluation, i.e. decorate getters in derived classed with
  something like "@lazyproperty". Then the actual calculation is done only
  once, if a attr is accessed (i.e. struct.cell). Currently we do that with
  calls to check_set_attr() in each getter. Some ideas: 
  http://stackoverflow.com/questions/3012421/python-lazy-property-decorator
  Then, FlexibleGetters can be removed completely!

crys.py
-------
* All *3d() funcs use simple loops currently. This is slow. Find vectorized
  versions or re-implement in Fortran (flib.f90) / Cython / ...
* Structure / Trajectory: Instead of cryst_const, store abc+angles, apply
  length unit to abc and derive cell + cryst_const from abc+angles. 
* rpdf(): Use scipy.spatial.distance.pdist() or cdist() or a variant of
   _flib.distsq_frac() for 3d array which is *much* faster.
  pdist() also returns a "condensed" 1d array w/ all distances. We can feed
  that directly to histogram()! This would solve major problems with that
  fuction.
* rpdf(): If we re-code the distance part in Fortran, add support for variable
  cell trajectories. 
* Maybe make crys.Structure / Trajectory do lazy evaluation by default 
  by setting set_all_auto to False (maybe rename it to "lazy"). No we have:
    st = Structure(...)
    st.cell         # access pre-calculated attr
    st.get_cell()   # calculate and return or return pre-calculated attr
  We want:  
    st.cell # call self.get_cell() if not calculated etc.
  This can be done only if we turn all attrs into lazy evaluated properties.

pydos.py
--------
* unify vacf_pdos(), direct_pdos(), they have almost the same signature and
  functionality, use a kwarg 'method' to select the method of calculation

* let *_pdos() return one 2d arry with several columns, like crys.rpdf()

* PDOS normalization. ATM we normalize so that Int(faxis, pdos) = area = 1.0. 
  But there may be others, like area = 3*natoms in the unit cell (not
  supercell), ...

all
---
* Drop verbose.py. Use the logging or warnings module.
* In some modules, we changed absolute to relative imports. 
  If we keep this, change in all modules.

cmd line tools in bin/
----------------------
* We now have abi2axsf.py and cpmd2axsf.py, where the latter is capable of
  doing more nice things like buildung a supercell of the trajectory. If we
  need this machinery for pw.x output too, then it's time to write pwo2axsf.py
  as a replacement for xcrysden's pwo2xsf.sh . Maybe unify all into smth like 
  any2axsf.py. However, whith the new API, we may not need that anymore. Just
  use smth like
  >>> traj = parse.SomeMDParser(...).get_traj()
  >>> sc = crys.scell3d(traj, (3,3,3))
  >>> io.write_axsf('foo_3x3x3.axsf', sc)

tests
-----
* Handle known fails with nose.
* In all test/test_*.py files, rename function test() -> test_<something>(), so
  that ``nosetests --exclude='.*<something>.*'`` works. 

plotting dispersions
--------------------
* Finish functions for parsing and plotting dispersions (pwscf.py, kpath.py).
  Remove unused and redundant stuff.

# vim:comments=fb\:*
